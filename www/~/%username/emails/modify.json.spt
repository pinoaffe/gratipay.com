"""
Manages the authenticated user's email addresses.
"""
from aspen import Response
from gratipay.utils import get_participant, is_valid_email_address
from gratipay.models.package import Package

[-----------------------------------------]

request.allow("POST")
participant = get_participant(state, restrict=True)

action = request.body['action']
address = request.body['address']
show_address_in_message = request.body.get('show_address_in_message', '') == 'yes'

# Basic checks. The real validation will happen when we send the email.
if not is_valid_email_address(address):
    raise Response(400, _("Invalid email address."))

if not participant.email_lang:
    participant.set_email_lang(request.headers.get("Accept-Language"))

msg = None
if action in ('add-email', 'resend', 'start-verification'):
    packages = []
    if action == 'start-verification':
        # work around Aspen limitation
        package_ids = request.body.all('package_id') if 'package_id' in request.body else []

        for package_id in package_ids:
            try:
                package = Package.from_id(package_id)
                assert address in package.emails
                team = package.team
                owner = team.owner if team else None
                assert owner == user.participant.username if owner else True
            except:
                raise Response(400)
            packages.append(package)
    elif 'package_id' in request.body:
        raise Response(400)

    participant.start_email_verification(address, *packages)
    if show_address_in_message:

        # When reverifying an already-verified email (package claiming is a
        # special case of this), then don't worry about content spoofing,

        msg = _("Check {email_address} for a verification link.", email_address=address)
    else:

        # ... but otherwise, do: https://hackerone.com/reports/117187.

        msg = _("Check your inbox for a verification link.")
elif action == 'set-primary':
    participant.set_primary_email(address)
elif action == 'remove':
    participant.remove_email(address)
else:
    raise Response(400, 'unknown action "%s"' % action)

[---] application/json via json_dump
msg
